generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model analytics {
  id            String       @id @db.Uuid
  restaurant_id String?      @db.Uuid
  report_date   DateTime     @db.Date
  total_orders  Int
  total_revenue Int
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model feedback {
  id            String       @id @db.Uuid
  customer_id   String?      @db.Uuid
  restaurant_id String?      @db.Uuid
  rating        Int
  comment       String?
  created_at    DateTime     @db.Timestamp(6)
  users         users?       @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu_items {
  id            String        @id @db.Uuid
  restaurant_id String?       @db.Uuid
  name          String        @db.VarChar(255)
  description   String?
  price         Int
  restaurants   restaurants?  @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  order_items   order_items[]
}

model order_items {
  id           String      @id @db.Uuid
  order_id     String?     @db.Uuid
  menu_item_id String?     @db.Uuid
  quantity     Int
  menu_items   menu_items? @relation(fields: [menu_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders       orders?     @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id            String        @id @db.Uuid
  customer_id   String?       @db.Uuid
  restaurant_id String?       @db.Uuid
  status        String        @db.VarChar(255)
  total_price   Int
  created_at    DateTime      @db.Timestamp(6)
  updated_at    DateTime      @db.Timestamp(6)
  order_items   order_items[]
  users         users?        @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  restaurants   restaurants?  @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model restaurants {
  id          String       @id @db.Uuid
  owner_id    String?      @db.Uuid
  name        String       @db.VarChar(255)
  location    String       @db.VarChar(255)
  description String?
  analytics   analytics[]
  feedback    feedback[]
  menu_items  menu_items[]
  orders      orders[]
  users       users?       @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff       staff[]
}

model staff {
  id            String       @id @db.Uuid
  user_id       String?      @db.Uuid
  restaurant_id String?      @db.Uuid
  role          String       @db.VarChar(255)
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id          String        @id @db.Uuid
  role        String        @db.VarChar(255)
  feedback    feedback[]
  orders      orders[]
  restaurants restaurants[]
  staff       staff[]
}
